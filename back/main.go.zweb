package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"time"
	"zweb"
)

func onlyForV2() zweb.HandlerFunc {
	return func(c *zweb.Context) {
		// Start timer
		t := time.Now()
		// if a server error occurred
		c.Fail(500, "Internal Server Error")
		// Calculate resolution time
		log.Printf("[%d] %s in %v for group v2", c.StatusCode, c.Req.RequestURI, time.Since(t))
	}
}

func formatAsDate(t time.Time) string {
	year, month, day := t.Date()
	return fmt.Sprintf("%d-%02d-%02d", year, month, day)
}

func main() {
	r := zweb.Default()
	r.Use(zweb.Logger()) // global midlleware

	r.SetFuncMap(template.FuncMap{
		"formatAsDate": formatAsDate,
	})

	r.LoadHTMLGlob("templates/*")
	r.Static("/assets", "./static")

	r.GET("/", func(c *zweb.Context) {
		c.HTML(http.StatusOK, "index.tmpl", zweb.H{
			"title": "Zeus SAAS",
			"now":   time.Date(2019, 8, 17, 0, 0, 0, 0, time.UTC),
		})
	})

	r.GET("/ws", func(c *zweb.Context) {
		c.UpgradeWebSocket()
		defer c.WsConn.Close()
		for {
			//读取ws中的数据
			mt, message, err := c.WsConn.ReadMessage()
			if err != nil {
				break
			}
			fmt.Println(string(message))
			if string(message) == "ping" {
				message = []byte("pong")
			}
			//写入ws数据
			err = c.WsConn.WriteMessage(mt, message)
			if err != nil {
				break
			}
		}
	})

	r.GET("/panic", func(c *zweb.Context) {
		names := []string{"geektutu"}
		c.String(http.StatusOK, names[100])
	})

	v2 := r.Group("/v2")
	v2.Use(onlyForV2()) // v2 group middleware
	{
		v2.GET("/hello/:name", func(c *zweb.Context) {
			// expect /hello/zwebktutu
			c.String(http.StatusOK, "hello %s, you're at %s\n", c.Param("name"), c.Path)
		})
	}

	r.Run(":9090")
}
